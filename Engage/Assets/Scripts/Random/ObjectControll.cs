//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Random/ObjectControll.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ObjectControll: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ObjectControll()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ObjectControll"",
    ""maps"": [
        {
            ""name"": ""Door"",
            ""id"": ""5325eef2-f463-45cf-b4f5-41e009e03596"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""0734a262-6d54-4e42-ab45-9dd79ac858d5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14b9e034-4995-4e9e-896c-4a93678f64df"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Swap"",
            ""id"": ""31c10217-95ca-4aa5-98dd-b557571f5fa2"",
            ""actions"": [
                {
                    ""name"": ""Swap"",
                    ""type"": ""Button"",
                    ""id"": ""0982e4a3-76ab-49bd-89c2-4579ba91b11b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d8334d2-5e42-4be9-8d56-e26f0e552622"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Door
        m_Door = asset.FindActionMap("Door", throwIfNotFound: true);
        m_Door_Interact = m_Door.FindAction("Interact", throwIfNotFound: true);
        // Player Swap
        m_PlayerSwap = asset.FindActionMap("Player Swap", throwIfNotFound: true);
        m_PlayerSwap_Swap = m_PlayerSwap.FindAction("Swap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Door
    private readonly InputActionMap m_Door;
    private List<IDoorActions> m_DoorActionsCallbackInterfaces = new List<IDoorActions>();
    private readonly InputAction m_Door_Interact;
    public struct DoorActions
    {
        private @ObjectControll m_Wrapper;
        public DoorActions(@ObjectControll wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Door_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Door; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DoorActions set) { return set.Get(); }
        public void AddCallbacks(IDoorActions instance)
        {
            if (instance == null || m_Wrapper.m_DoorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DoorActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IDoorActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IDoorActions instance)
        {
            if (m_Wrapper.m_DoorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDoorActions instance)
        {
            foreach (var item in m_Wrapper.m_DoorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DoorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DoorActions @Door => new DoorActions(this);

    // Player Swap
    private readonly InputActionMap m_PlayerSwap;
    private List<IPlayerSwapActions> m_PlayerSwapActionsCallbackInterfaces = new List<IPlayerSwapActions>();
    private readonly InputAction m_PlayerSwap_Swap;
    public struct PlayerSwapActions
    {
        private @ObjectControll m_Wrapper;
        public PlayerSwapActions(@ObjectControll wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swap => m_Wrapper.m_PlayerSwap_Swap;
        public InputActionMap Get() { return m_Wrapper.m_PlayerSwap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerSwapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerSwapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerSwapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerSwapActionsCallbackInterfaces.Add(instance);
            @Swap.started += instance.OnSwap;
            @Swap.performed += instance.OnSwap;
            @Swap.canceled += instance.OnSwap;
        }

        private void UnregisterCallbacks(IPlayerSwapActions instance)
        {
            @Swap.started -= instance.OnSwap;
            @Swap.performed -= instance.OnSwap;
            @Swap.canceled -= instance.OnSwap;
        }

        public void RemoveCallbacks(IPlayerSwapActions instance)
        {
            if (m_Wrapper.m_PlayerSwapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerSwapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerSwapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerSwapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerSwapActions @PlayerSwap => new PlayerSwapActions(this);
    public interface IDoorActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IPlayerSwapActions
    {
        void OnSwap(InputAction.CallbackContext context);
    }
}
